/**

    A blockchain network handles resource representations or assets between participants.
    A partipant is a stakeholder of these assets.

    What is an asset on the blockchain? Their digital #data-enriched version.
    It will contain unique ids, names, figures or ... you know, data.

    Assets can be modified, which looks like changing "welcoem" to "welcome".
    On the blockchain however we want to record everything while 
    keeping it safe, so we call these modifications "transactions", which is like
    repairing your bike.

    After repairing your bike, you get a receipt... What's noted on a receipt? Relevant information including shop details, final price, date, ...
    In similar fashion, a transaction contains it's relevant information to complete the transaction.

    When a transaction is completed, information can be "emitted" or send to someone who
    also uses our channel on the blockchain.

    Below a first version of an audit trail business network model.

    Author: Adam 'Blvck' Blazejczak
 */

namespace be.vlaanderen.audittrail

/** 
    STAKEHOLDERS
**/

participant ParticipantAuditor identified by auditor_id {
  o String auditor_id
}

participant ParticipantPublicServant identified by public_servant_id {
  o String public_servant_id
  o String department
}

participant ParticipantCivilian identified by civilian_id {
  o String civilian_id
  o String first_name optional
  o String last_name optional
  o String salted_hash_rijksregisternummer optional
}

/**
    RELEVANT STAKEHOLDER'S ASSETS
**/

asset AuditRequest identified by audit_id {
  // audit Report Details
  o String audit_id
  o String timestamp
  o AuditRequesState request_state

  // stakeholders
  --> ParticipantCivilian sender
  --> ParticipantAuditor auditor

  // relevant log entry
  --> LogEntry log_to_review
}

    enum AuditRequesState {
      o REQUESTED
      o REVISED
      o DONE
    }

asset LogEntry identified by log_id {
  o String log_id
  o String timestamp 
  o String carbon_hash

  // stakeholders
  --> ParticipantPublicServant accessed_by
  --> ParticipantCivilian data_owner

  // basic log details
  o LogCategory category

  // details
  o String context
  o String document optional
}

    enum LogCategory {
      // TODO: ask for clarification on this one
      o BOUWVERGUNNING
      o RIJKSREGISTERNUMMER
    }

/**
    Transactions
**/

transaction NewLogEntry {
  o String carbon_hash
  
  // stakeholders
  --> ParticipantPublicServant accessed_by
  --> ParticipantCivilian data_owner

  // transaction details
  o LogCategory category
  o String context
  o String document optional
}

transaction NewAuditRequest {
  // stakeholders
  --> ParticipantCivilian sender
  --> ParticipantAuditor auditor

  // relevant log entry
  --> LogEntry log_to_review
}

transaction ChangeAuditRequestState {
  // new state for a given 
  o String audit_id
  o AuditRequesState new_state
}

/**
    Events
**/

event LogEntryAdded {
  o String log_id
}

event AuditRequestAdded {
  o String audit_id
}

event AuditRequestUpdated {
  o String audit_id
}